using System;
using System.Collections.Generic;
using System.IO;

namespace CrateModLoader.GameSpecific.WormsForts.XOM
{
    [XOM_TypeName("WeaponDataCtr")]
    public class WeaponDataCtr : Container
    {
        public VInt Name = new VInt();
        public uint WeaponID;
        public VInt WeaponResourceName = new VInt();
        public VInt RoundResourceName = new VInt();
        public VInt SubRoundResourceName = new VInt();
        public VInt RandomRoundResource2 = new VInt();
        public VInt RandomRoundResource3 = new VInt();
        public VInt RandomRoundResource4 = new VInt();
        public VInt RandomRoundResource5 = new VInt();
        public VInt SubRandomRoundResource2 = new VInt();
        public VInt SubRandomRoundResource3 = new VInt();
        public VInt SubRandomRoundResource4 = new VInt();
        public VInt SubRandomRoundResource5 = new VInt();
        public float MinShotPower;
        public float MaxShotPower;
        public float TimeToReachMaxShotPower;
        public ByteBool ShotPowerIsFixed = new ByteBool();
        public uint ResourcePointsRequired;
        public uint FiringPlatformRequired;
        public ByteBool DamagesBuildings = new ByteBool();
        public ByteBool CanBeFiredFromAnywhere = new ByteBool();
        public ByteBool WeaponFiresAutomatically = new ByteBool();
        public float UserSelectableFuseTime;
        public float UserSelectableBounceSetting;
        public ByteBool GlobalWeaponDamage = new ByteBool();
        public ByteBool WeaponCanBeMovedWhileFiring = new ByteBool();
        public ByteBool MovementResistanceWhenFiring = new ByteBool();
        public uint NumberOfShotsPerTurn;
        public ByteBool UseWeaponCameraWhenFired = new ByteBool();
        public float RandomAimModifierHorizontal;
        public float RandomAimModifierVertical;
        public float ImpactDamageRepeatDelay;
        public uint AnimFrameForVerticalLaunch;
        public uint AnimFrameForHorizontalLaunch;
        public ByteBool IsStrikeWeapon = new ByteBool();
        public ByteBool IsGodWeapon = new ByteBool();
        public ByteBool UsesBlimpViewToAim = new ByteBool();
        public VInt StrikeWeaponBomberResourceName = new VInt();
        public VInt GodWormStartAnimationName = new VInt();
        public VInt GodWormEndAnimationName = new VInt();
        public ByteBool RoamingWeaponAvoidsSteepSlopes = new ByteBool();
        public ByteBool RoamingWeaponAvoidsObstructions = new ByteBool();
        public float RoamingWeaponAcceleration;
        public float RoamingWeaponTopSpeed;
        public float RoamingWeaponTurnRate;
        public float RoamingWeaponImpactRebound;
        public float RoamingWeaponHeightAboveGround;
        public ByteBool RoadmingWeaponRandomlyChangesDirection = new ByteBool();
        public float RoamingWeaponRandomDirectionChangeDelay;
        public float RoamingWeaponJumpSpeed;
        public float RoamingWeaponSteeringRate;
        public VInt RoamingWeaponDustTrailEmitterName = new VInt();
        public float FlyingWeaponMaxSpeed;
        public float FlyingWeaponTimeToReachMaxSpeed;
        public float FlyingWeaponSpeedReductionWhenTurning;
        public float FlyingWeaponMaxYawRate;
        public float FlyingWeaponMaxPitchRate;
        public float FlyingWeaponMaxRollRate;
        public float FlyingWeaponYawResponseTime;
        public float FlyingWeaponPitchResponseTime;
        public float FlyingWeaponRollResponseTime;
        public float FlyingWeaponAIMinHeightAboveGround;
        public float FlyingWeaponAIMaxHeightAboveGround;
        public VInt FlyingWeaponYawAnimName = new VInt();
        public VInt FlyingWeaponPitchAnimName = new VInt();
        public VInt FlyingWeaponRollAnimName = new VInt();
        public float FlyingWeaponActivationDelay;
        public float MaxHorizontalAimAngle;
        public float MinVerticalAimAngle;
        public float MaxVerticalAimAngle;
        public float MaxHorizontalAimSpeed;
        public float MaxVerticalAimSpeed;
        public float InitialVerticalAimAngle;
        public float WindFactor;
        public float GravityFactor;
        public float AirResistance;
        public float CamFirstPersonCameraDistance;
        public float CamThirdPersonCameraDistance;
        public float CamDefaultThirdPersonCameraPitch;
        public float CamMinThirdPersonCameraPitch;
        public float CamMaxThirdPersonCameraPitch;
        public float CamMaxThirdPersonHorizontalSpeed;
        public float CamMaxThirdPersonVerticalSpeed;
        public Vector3 CamFirstPersonOffset = new Vector3();
        public Vector3 CamThirdPersonOffset = new Vector3();
        public float CamVisibleRadius;
        public float CamMinFireDistance;
        public float ActionCamDist;
        public float ActionCamAngle;
        public ByteBool HideSiegeWeaponInFirstPersonView = new ByteBool();
        public float GunWobbleMaxAmp;
        public float GunWobblePeriod;
        public float GunWobbleSpeed;
        public float GunWobbleKickSize;
        public float GunWobbleKickDelay;
        public ByteBool IsHandHeldWeapon = new ByteBool();
        public VInt HandHeldWeaponEndFireAnimationName = new VInt();
        public VInt HandHeldWeaponResourceName = new VInt();
        public VInt HandHeldWeaponAttachLocatorName = new VInt();
        public uint HandHeldWeaponFireAnimLaunchFrame;
        public float MeleeWeaponRange;
        public float MeleeWeaponAngle;
        public float MeleeWeaponPushForce;
        public uint RateOfFire;
        public float RepeatingWeaponFiringDuration;
        public VInt RepeatingWeaponSpinUpAnimName = new VInt();
        public VInt RepeatingWeaponSpinDownAnimName = new VInt();
        public float RepeatingWeaponSpinUpDelay;
        public float RepeatingWeaponSpinDownDelay;
        public VInt AudioWeaponFire = new VInt();
        public VInt AudioWeaponPowerUp = new VInt();
        public VInt AudioWeaponPowerDown = new VInt();
        public VInt AudioRoundImpact = new VInt();
        public VInt AudioRoundExplode = new VInt();
        public VInt AudioRoundActive = new VInt();
        public VInt AudioBomberActive = new VInt();
        public VInt AudioWeaponPitch = new VInt();
        public VInt AudioWeaponRotate = new VInt();
        public VInt AudioWormIdle = new VInt();
        public VInt AudioWeaponAppear = new VInt();
        public VInt AudioWeaponVanish = new VInt();
        public VInt WeaponEmitter1Name = new VInt();
        public uint WeaponEmitter1Trigger;
        public VInt WeaponEmitter1LocatorName = new VInt();
        public float WeaponEmitter1Timer;
        public VInt WeaponEmitter2Name = new VInt();
        public uint WeaponEmitter2Trigger;
        public VInt WeaponEmitter2LocatorName = new VInt();
        public float WeaponEmitter2Timer;
        public VInt WeaponEmitter3Name = new VInt();
        public uint WeaponEmitter3Trigger;
        public VInt WeaponEmitter3LocatorName = new VInt();
        public float WeaponEmitter3Timer;
        public VInt WeaponEmitter4Name = new VInt();
        public uint WeaponEmitter4Trigger;
        public VInt WeaponEmitter4LocatorName = new VInt();
        public float WeaponEmitter4Timer;
        public VInt WormIdleAnimationName = new VInt();
        public VInt WormHoldAnimationName = new VInt();
        public VInt WormDrawWeaponAnimationName = new VInt();
        public VInt WormAimWeaponAnimationName = new VInt();
        public VInt WormFireWeaponAnimationName = new VInt();
        public VInt WormSnapDrawAnimationName = new VInt();
        public VInt WormHatName = new VInt();
        public uint RoundType;
        public uint NumRounds;
        public ByteBool RoundUsesParabolicTrajectory = new ByteBool();
        public float RoundImpactBehaviour;
        public float RoundFuseTime;
        public ByteBool RoundExplodesWhenFuseExpires = new ByteBool();
        public float RoundMass;
        public float RoundRestitution;
        public float RoundFriction;
        public float RoundImpactFriction;
        public float RoundCollisionSphereRadius;
        public uint RoundExplosionType;
        public float RoundExplosionRadius;
        public float RoundExplosionInnerRadius;
        public float RoundMaxExplosionDamage;
        public float RoundMaxExplosionWormDamage;
        public float RoundMaxExplosionForce;
        public float RoundExplosionForceFactorAddUp;
        public VInt RoundImpaceAnimationName = new VInt();
        public float RoundImpactDamage;
        public float RoundImpactWormDamage;
        public float RoundImpaceForce;
        public ByteBool RoundRespondsToFireButton = new ByteBool();
        public VInt RoundIdleAnimaionName = new VInt();
        public VInt RoundFiringAnimationName = new VInt();
        public VInt RoundFallingAnimationName = new VInt();
        public VInt RoundActiveAnimationName = new VInt();
        public float RoundRandomRotation;
        public ByteBool RoundGraphicFacesDirectionOfTravel = new ByteBool();
        public float RoundGraphicRotationY;
        public float RoundGraphicRotationX;
        public VInt RoundEmitter1Name = new VInt();
        public uint RoundEmitter1Trigger;
        public uint RoundEmitter1LocatorNum;
        public float RoundEmitter1Timer;
        public float RoundEmitter1LinearVelocityScale;
        public VInt RoundEmitter2Name = new VInt();
        public uint RoundEmitter2Trigger;
        public uint RoundEmitter2LocatorNum;
        public float RoundEmitter2Timer;
        public float RoundEmitter2LinearVelocityScale;
        public VInt RoundEmitter3Name = new VInt();
        public uint RoundEmitter3Trigger;
        public uint RoundEmitter3LocatorNum;
        public float RoundEmitter3Timer;
        public float RoundEmitter3LinearVelocityScale;
        public float RoundDelayBetweenRounds;
        public uint MethodOfAttachingRoundMeshToWeapon;
        public float ProximityRoundDetectionRadius;
        public float ProximityRoundActivationFuse;
        public float ProximityRoundActivationEffect;
        public uint ProximityRoundGameTurnsToBeActive;
        public float ProximityRoundDetectionYOffset;
        public uint SubRoundType;
        public uint NumSubRounds;
        public float SubRoundImpactBehaviour;
        public float SubRoundInitialSpeedY;
        public float SubRoundInitialSpeedXZ;
        public float SubRoundVelocityFactorOfMainRound;
        public float SubRoundInitialPositionOffset;
        public float SubRoundFuseTime;
        public ByteBool SubRoundExplodesWhenFuseExpires = new ByteBool();
        public float SubRoundMass;
        public float SubRoundRestitution;
        public float SubRoundFriction;
        public float SubRoundImpactFriction;
        public float SubRoundCollisionSphereRadius;
        public uint SubRoundExplosionType;
        public float SubRoundExplosionRadius;
        public float SubRoundExplosionInnerRadius;
        public float SubRoundMaxExplosionDamage;
        public float SubRoundMaxExplosionWormDamage;
        public float SubRoundMaxExplosionForce;
        public float SubRoundExplosionForceFactorAddUp;
        public float SubRoundImpactDamage;
        public float SubRoundImpactWormDamage;
        public float SubRoundImpaceForce;
        public ByteBool SubRoundRespondsToFireButton = new ByteBool();
        public float SubRoundRandomRotation;
        public ByteBool SubRoundGraphicFacesDirectionOfTravel = new ByteBool();
        public float SubRoundGraphicRotationY;
        public float SubRoundGraphicRotationX;
        public VInt SubRoundEmitter1Name = new VInt();
        public uint SubRoundEmitter1Trigger;
        public uint SubRoundEmitter1LocatorNum;
        public float SubRoundEmitter1Timer;
        public float SubRoundEmitter1LinearVelocityScale;
        public VInt SubRoundEmitter2Name = new VInt();
        public uint SubRoundEmitter2Trigger;
        public uint SubRoundEmitter2LocatorNum;
        public float SubRoundEmitter2Timer;
        public float SubRoundEmitter2LinearVelocityScale;
        public VInt SubRoundEmitter3Name = new VInt();
        public uint SubRoundEmitter3Trigger;
        public uint SubRoundEmitter3LocatorNum;
        public float SubRoundEmitter3Timer;
        public float SubRoundEmitter3LinearVelocityScale;


        public override void Read(BinaryReader reader)
        {
            Name.Read(reader);
            WeaponID = reader.ReadUInt32();
            WeaponResourceName.Read(reader);
            RoundResourceName.Read(reader);
            SubRoundResourceName.Read(reader);
            RandomRoundResource2.Read(reader);
            RandomRoundResource3.Read(reader);
            RandomRoundResource4.Read(reader);
            RandomRoundResource5.Read(reader);
            SubRandomRoundResource2.Read(reader);
            SubRandomRoundResource3.Read(reader);
            SubRandomRoundResource4.Read(reader);
            SubRandomRoundResource5.Read(reader);
            MinShotPower = reader.ReadSingle();
            MaxShotPower = reader.ReadSingle();
            TimeToReachMaxShotPower = reader.ReadSingle();
            ShotPowerIsFixed.Read(reader);
            ResourcePointsRequired = reader.ReadUInt32();
            FiringPlatformRequired = reader.ReadUInt32();
            DamagesBuildings.Read(reader);
            CanBeFiredFromAnywhere.Read(reader);
            WeaponFiresAutomatically.Read(reader);
            UserSelectableFuseTime = reader.ReadSingle();
            UserSelectableBounceSetting = reader.ReadSingle();
            GlobalWeaponDamage.Read(reader);
            WeaponCanBeMovedWhileFiring.Read(reader);
            MovementResistanceWhenFiring.Read(reader);
            NumberOfShotsPerTurn = reader.ReadUInt32();
            UseWeaponCameraWhenFired.Read(reader);
            RandomAimModifierHorizontal = reader.ReadSingle();
            RandomAimModifierVertical = reader.ReadSingle();
            ImpactDamageRepeatDelay = reader.ReadSingle();
            AnimFrameForVerticalLaunch = reader.ReadUInt32();
            AnimFrameForHorizontalLaunch = reader.ReadUInt32();
            IsStrikeWeapon.Read(reader);
            IsGodWeapon.Read(reader);
            UsesBlimpViewToAim.Read(reader);
            StrikeWeaponBomberResourceName.Read(reader);
            GodWormStartAnimationName.Read(reader);
            GodWormEndAnimationName.Read(reader);
            RoamingWeaponAvoidsSteepSlopes.Read(reader);
            RoamingWeaponAvoidsObstructions.Read(reader);
            RoamingWeaponAcceleration = reader.ReadSingle();
            RoamingWeaponTopSpeed = reader.ReadSingle();
            RoamingWeaponTurnRate = reader.ReadSingle();
            RoamingWeaponImpactRebound = reader.ReadSingle();
            RoamingWeaponHeightAboveGround = reader.ReadSingle();
            RoadmingWeaponRandomlyChangesDirection.Read(reader);
            RoamingWeaponRandomDirectionChangeDelay = reader.ReadSingle();
            RoamingWeaponJumpSpeed = reader.ReadSingle();
            RoamingWeaponSteeringRate = reader.ReadSingle();
            RoamingWeaponDustTrailEmitterName.Read(reader);
            FlyingWeaponMaxSpeed = reader.ReadSingle();
            FlyingWeaponTimeToReachMaxSpeed = reader.ReadSingle();
            FlyingWeaponSpeedReductionWhenTurning = reader.ReadSingle();
            FlyingWeaponMaxYawRate = reader.ReadSingle();
            FlyingWeaponMaxPitchRate = reader.ReadSingle();
            FlyingWeaponMaxRollRate = reader.ReadSingle();
            FlyingWeaponYawResponseTime = reader.ReadSingle();
            FlyingWeaponPitchResponseTime = reader.ReadSingle();
            FlyingWeaponRollResponseTime = reader.ReadSingle();
            FlyingWeaponAIMinHeightAboveGround = reader.ReadSingle();
            FlyingWeaponAIMaxHeightAboveGround = reader.ReadSingle();
            FlyingWeaponYawAnimName.Read(reader);
            FlyingWeaponPitchAnimName.Read(reader);
            FlyingWeaponRollAnimName.Read(reader);
            FlyingWeaponActivationDelay = reader.ReadSingle();
            MaxHorizontalAimAngle = reader.ReadSingle();
            MinVerticalAimAngle = reader.ReadSingle();
            MaxVerticalAimAngle = reader.ReadSingle();
            MaxHorizontalAimSpeed = reader.ReadSingle();
            MaxVerticalAimSpeed = reader.ReadSingle();
            InitialVerticalAimAngle = reader.ReadSingle();
            WindFactor = reader.ReadSingle();
            GravityFactor = reader.ReadSingle();
            AirResistance = reader.ReadSingle();
            CamFirstPersonCameraDistance = reader.ReadSingle();
            CamThirdPersonCameraDistance = reader.ReadSingle();
            CamDefaultThirdPersonCameraPitch = reader.ReadSingle();
            CamMinThirdPersonCameraPitch = reader.ReadSingle();
            CamMaxThirdPersonCameraPitch = reader.ReadSingle();
            CamMaxThirdPersonHorizontalSpeed = reader.ReadSingle();
            CamMaxThirdPersonVerticalSpeed = reader.ReadSingle();
            CamFirstPersonOffset.Read(reader);
            CamThirdPersonOffset.Read(reader);
            CamVisibleRadius = reader.ReadSingle();
            CamMinFireDistance = reader.ReadSingle();
            ActionCamDist = reader.ReadSingle();
            ActionCamAngle = reader.ReadSingle();
            HideSiegeWeaponInFirstPersonView.Read(reader);
            GunWobbleMaxAmp = reader.ReadSingle();
            GunWobblePeriod = reader.ReadSingle();
            GunWobbleSpeed = reader.ReadSingle();
            GunWobbleKickSize = reader.ReadSingle();
            GunWobbleKickDelay = reader.ReadSingle();
            IsHandHeldWeapon.Read(reader);
            HandHeldWeaponEndFireAnimationName.Read(reader);
            HandHeldWeaponResourceName.Read(reader);
            HandHeldWeaponAttachLocatorName.Read(reader);
            HandHeldWeaponFireAnimLaunchFrame = reader.ReadUInt32();
            MeleeWeaponRange = reader.ReadSingle();
            MeleeWeaponAngle = reader.ReadSingle();
            MeleeWeaponPushForce = reader.ReadSingle();
            RateOfFire = reader.ReadUInt32();
            RepeatingWeaponFiringDuration = reader.ReadSingle();
            RepeatingWeaponSpinUpAnimName.Read(reader);
            RepeatingWeaponSpinDownAnimName.Read(reader);
            RepeatingWeaponSpinUpDelay = reader.ReadSingle();
            RepeatingWeaponSpinDownDelay = reader.ReadSingle();
            AudioWeaponFire.Read(reader);
            AudioWeaponPowerUp.Read(reader);
            AudioWeaponPowerDown.Read(reader);
            AudioRoundImpact.Read(reader);
            AudioRoundExplode.Read(reader);
            AudioRoundActive.Read(reader);
            AudioBomberActive.Read(reader);
            AudioWeaponPitch.Read(reader);
            AudioWeaponRotate.Read(reader);
            AudioWormIdle.Read(reader);
            AudioWeaponAppear.Read(reader);
            AudioWeaponVanish.Read(reader);
            WeaponEmitter1Name.Read(reader);
            WeaponEmitter1Trigger = reader.ReadUInt32();
            WeaponEmitter1LocatorName.Read(reader);
            WeaponEmitter1Timer = reader.ReadSingle();
            WeaponEmitter2Name.Read(reader);
            WeaponEmitter2Trigger = reader.ReadUInt32();
            WeaponEmitter2LocatorName.Read(reader);
            WeaponEmitter2Timer = reader.ReadSingle();
            WeaponEmitter3Name.Read(reader);
            WeaponEmitter3Trigger = reader.ReadUInt32();
            WeaponEmitter3LocatorName.Read(reader);
            WeaponEmitter3Timer = reader.ReadSingle();
            WeaponEmitter4Name.Read(reader);
            WeaponEmitter4Trigger = reader.ReadUInt32();
            WeaponEmitter4LocatorName.Read(reader);
            WeaponEmitter4Timer = reader.ReadSingle();
            WormIdleAnimationName.Read(reader);
            WormHoldAnimationName.Read(reader);
            WormDrawWeaponAnimationName.Read(reader);
            WormAimWeaponAnimationName.Read(reader);
            WormFireWeaponAnimationName.Read(reader);
            WormSnapDrawAnimationName.Read(reader);
            WormHatName.Read(reader);
            RoundType = reader.ReadUInt32();
            NumRounds = reader.ReadUInt32();
            RoundUsesParabolicTrajectory.Read(reader);
            RoundImpactBehaviour = reader.ReadSingle();
            RoundFuseTime = reader.ReadSingle();
            RoundExplodesWhenFuseExpires.Read(reader);
            RoundMass = reader.ReadSingle();
            RoundRestitution = reader.ReadSingle();
            RoundFriction = reader.ReadSingle();
            RoundImpactFriction = reader.ReadSingle();
            RoundCollisionSphereRadius = reader.ReadSingle();
            RoundExplosionType = reader.ReadUInt32();
            RoundExplosionRadius = reader.ReadSingle();
            RoundExplosionInnerRadius = reader.ReadSingle();
            RoundMaxExplosionDamage = reader.ReadSingle();
            RoundMaxExplosionWormDamage = reader.ReadSingle();
            RoundMaxExplosionForce = reader.ReadSingle();
            RoundExplosionForceFactorAddUp = reader.ReadSingle();
            RoundImpaceAnimationName.Read(reader);
            RoundImpactDamage = reader.ReadSingle();
            RoundImpactWormDamage = reader.ReadSingle();
            RoundImpaceForce = reader.ReadSingle();
            RoundRespondsToFireButton.Read(reader);
            RoundIdleAnimaionName.Read(reader);
            RoundFiringAnimationName.Read(reader);
            RoundFallingAnimationName.Read(reader);
            RoundActiveAnimationName.Read(reader);
            RoundRandomRotation = reader.ReadSingle();
            RoundGraphicFacesDirectionOfTravel.Read(reader);
            RoundGraphicRotationY = reader.ReadSingle();
            RoundGraphicRotationX = reader.ReadSingle();
            RoundEmitter1Name.Read(reader);
            RoundEmitter1Trigger = reader.ReadUInt32();
            RoundEmitter1LocatorNum = reader.ReadUInt32();
            RoundEmitter1Timer = reader.ReadSingle();
            RoundEmitter1LinearVelocityScale = reader.ReadSingle();
            RoundEmitter2Name.Read(reader);
            RoundEmitter2Trigger = reader.ReadUInt32();
            RoundEmitter2LocatorNum = reader.ReadUInt32();
            RoundEmitter2Timer = reader.ReadSingle();
            RoundEmitter2LinearVelocityScale = reader.ReadSingle();
            RoundEmitter3Name.Read(reader);
            RoundEmitter3Trigger = reader.ReadUInt32();
            RoundEmitter3LocatorNum = reader.ReadUInt32();
            RoundEmitter3Timer = reader.ReadSingle();
            RoundEmitter3LinearVelocityScale = reader.ReadSingle();
            RoundDelayBetweenRounds = reader.ReadSingle();
            MethodOfAttachingRoundMeshToWeapon = reader.ReadUInt32();
            ProximityRoundDetectionRadius = reader.ReadSingle();
            ProximityRoundActivationFuse = reader.ReadSingle();
            ProximityRoundActivationEffect = reader.ReadSingle();
            ProximityRoundGameTurnsToBeActive = reader.ReadUInt32();
            ProximityRoundDetectionYOffset = reader.ReadSingle();
            SubRoundType = reader.ReadUInt32();
            NumSubRounds = reader.ReadUInt32();
            SubRoundImpactBehaviour = reader.ReadSingle();
            SubRoundInitialSpeedY = reader.ReadSingle();
            SubRoundInitialSpeedXZ = reader.ReadSingle();
            SubRoundVelocityFactorOfMainRound = reader.ReadSingle();
            SubRoundInitialPositionOffset = reader.ReadSingle();
            SubRoundFuseTime = reader.ReadSingle();
            SubRoundExplodesWhenFuseExpires.Read(reader);
            SubRoundMass = reader.ReadSingle();
            SubRoundRestitution = reader.ReadSingle();
            SubRoundFriction = reader.ReadSingle();
            SubRoundImpactFriction = reader.ReadSingle();
            SubRoundCollisionSphereRadius = reader.ReadSingle();
            SubRoundExplosionType = reader.ReadUInt32();
            SubRoundExplosionRadius = reader.ReadSingle();
            SubRoundExplosionInnerRadius = reader.ReadSingle();
            SubRoundMaxExplosionDamage = reader.ReadSingle();
            SubRoundMaxExplosionWormDamage = reader.ReadSingle();
            SubRoundMaxExplosionForce = reader.ReadSingle();
            SubRoundExplosionForceFactorAddUp = reader.ReadSingle();
            SubRoundImpactDamage = reader.ReadSingle();
            SubRoundImpactWormDamage = reader.ReadSingle();
            SubRoundImpaceForce = reader.ReadSingle();
            SubRoundRespondsToFireButton.Read(reader);
            SubRoundRandomRotation = reader.ReadSingle();
            SubRoundGraphicFacesDirectionOfTravel.Read(reader);
            SubRoundGraphicRotationY = reader.ReadSingle();
            SubRoundGraphicRotationX = reader.ReadSingle();
            SubRoundEmitter1Name.Read(reader);
            SubRoundEmitter1Trigger = reader.ReadUInt32();
            SubRoundEmitter1LocatorNum = reader.ReadUInt32();
            SubRoundEmitter1Timer = reader.ReadSingle();
            SubRoundEmitter1LinearVelocityScale = reader.ReadSingle();
            SubRoundEmitter2Name.Read(reader);
            SubRoundEmitter2Trigger = reader.ReadUInt32();
            SubRoundEmitter2LocatorNum = reader.ReadUInt32();
            SubRoundEmitter2Timer = reader.ReadSingle();
            SubRoundEmitter2LinearVelocityScale = reader.ReadSingle();
            SubRoundEmitter3Name.Read(reader);
            SubRoundEmitter3Trigger = reader.ReadUInt32();
            SubRoundEmitter3LocatorNum = reader.ReadUInt32();
            SubRoundEmitter3Timer = reader.ReadSingle();
            SubRoundEmitter3LinearVelocityScale = reader.ReadSingle();
        }

        public override void Write(BinaryWriter writer)
        {
            Name.Write(writer);
            writer.Write(WeaponID);
            WeaponResourceName.Write(writer);
            RoundResourceName.Write(writer);
            SubRoundResourceName.Write(writer);
            RandomRoundResource2.Write(writer);
            RandomRoundResource3.Write(writer);
            RandomRoundResource4.Write(writer);
            RandomRoundResource5.Write(writer);
            SubRandomRoundResource2.Write(writer);
            SubRandomRoundResource3.Write(writer);
            SubRandomRoundResource4.Write(writer);
            SubRandomRoundResource5.Write(writer);
            writer.Write(MinShotPower);
            writer.Write(MaxShotPower);
            writer.Write(TimeToReachMaxShotPower);
            ShotPowerIsFixed.Write(writer);
            writer.Write(ResourcePointsRequired);
            writer.Write(FiringPlatformRequired);
            DamagesBuildings.Write(writer);
            CanBeFiredFromAnywhere.Write(writer);
            WeaponFiresAutomatically.Write(writer);
            writer.Write(UserSelectableFuseTime);
            writer.Write(UserSelectableBounceSetting);
            GlobalWeaponDamage.Write(writer);
            WeaponCanBeMovedWhileFiring.Write(writer);
            MovementResistanceWhenFiring.Write(writer);
            writer.Write(NumberOfShotsPerTurn);
            UseWeaponCameraWhenFired.Write(writer);
            writer.Write(RandomAimModifierHorizontal);
            writer.Write(RandomAimModifierVertical);
            writer.Write(ImpactDamageRepeatDelay);
            writer.Write(AnimFrameForVerticalLaunch);
            writer.Write(AnimFrameForHorizontalLaunch);
            IsStrikeWeapon.Write(writer);
            IsGodWeapon.Write(writer);
            UsesBlimpViewToAim.Write(writer);
            StrikeWeaponBomberResourceName.Write(writer);
            GodWormStartAnimationName.Write(writer);
            GodWormEndAnimationName.Write(writer);
            RoamingWeaponAvoidsSteepSlopes.Write(writer);
            RoamingWeaponAvoidsObstructions.Write(writer);
            writer.Write(RoamingWeaponAcceleration);
            writer.Write(RoamingWeaponTopSpeed);
            writer.Write(RoamingWeaponTurnRate);
            writer.Write(RoamingWeaponImpactRebound);
            writer.Write(RoamingWeaponHeightAboveGround);
            RoadmingWeaponRandomlyChangesDirection.Write(writer);
            writer.Write(RoamingWeaponRandomDirectionChangeDelay);
            writer.Write(RoamingWeaponJumpSpeed);
            writer.Write(RoamingWeaponSteeringRate);
            RoamingWeaponDustTrailEmitterName.Write(writer);
            writer.Write(FlyingWeaponMaxSpeed);
            writer.Write(FlyingWeaponTimeToReachMaxSpeed);
            writer.Write(FlyingWeaponSpeedReductionWhenTurning);
            writer.Write(FlyingWeaponMaxYawRate);
            writer.Write(FlyingWeaponMaxPitchRate);
            writer.Write(FlyingWeaponMaxRollRate);
            writer.Write(FlyingWeaponYawResponseTime);
            writer.Write(FlyingWeaponPitchResponseTime);
            writer.Write(FlyingWeaponRollResponseTime);
            writer.Write(FlyingWeaponAIMinHeightAboveGround);
            writer.Write(FlyingWeaponAIMaxHeightAboveGround);
            FlyingWeaponYawAnimName.Write(writer);
            FlyingWeaponPitchAnimName.Write(writer);
            FlyingWeaponRollAnimName.Write(writer);
            writer.Write(FlyingWeaponActivationDelay);
            writer.Write(MaxHorizontalAimAngle);
            writer.Write(MinVerticalAimAngle);
            writer.Write(MaxVerticalAimAngle);
            writer.Write(MaxHorizontalAimSpeed);
            writer.Write(MaxVerticalAimSpeed);
            writer.Write(InitialVerticalAimAngle);
            writer.Write(WindFactor);
            writer.Write(GravityFactor);
            writer.Write(AirResistance);
            writer.Write(CamFirstPersonCameraDistance);
            writer.Write(CamThirdPersonCameraDistance);
            writer.Write(CamDefaultThirdPersonCameraPitch);
            writer.Write(CamMinThirdPersonCameraPitch);
            writer.Write(CamMaxThirdPersonCameraPitch);
            writer.Write(CamMaxThirdPersonHorizontalSpeed);
            writer.Write(CamMaxThirdPersonVerticalSpeed);
            CamFirstPersonOffset.Write(writer);
            CamThirdPersonOffset.Write(writer);
            writer.Write(CamVisibleRadius);
            writer.Write(CamMinFireDistance);
            writer.Write(ActionCamDist);
            writer.Write(ActionCamAngle);
            HideSiegeWeaponInFirstPersonView.Write(writer);
            writer.Write(GunWobbleMaxAmp);
            writer.Write(GunWobblePeriod);
            writer.Write(GunWobbleSpeed);
            writer.Write(GunWobbleKickSize);
            writer.Write(GunWobbleKickDelay);
            IsHandHeldWeapon.Write(writer);
            HandHeldWeaponEndFireAnimationName.Write(writer);
            HandHeldWeaponResourceName.Write(writer);
            HandHeldWeaponAttachLocatorName.Write(writer);
            writer.Write(HandHeldWeaponFireAnimLaunchFrame);
            writer.Write(MeleeWeaponRange);
            writer.Write(MeleeWeaponAngle);
            writer.Write(MeleeWeaponPushForce);
            writer.Write(RateOfFire);
            writer.Write(RepeatingWeaponFiringDuration);
            RepeatingWeaponSpinUpAnimName.Write(writer);
            RepeatingWeaponSpinDownAnimName.Write(writer);
            writer.Write(RepeatingWeaponSpinUpDelay);
            writer.Write(RepeatingWeaponSpinDownDelay);
            AudioWeaponFire.Write(writer);
            AudioWeaponPowerUp.Write(writer);
            AudioWeaponPowerDown.Write(writer);
            AudioRoundImpact.Write(writer);
            AudioRoundExplode.Write(writer);
            AudioRoundActive.Write(writer);
            AudioBomberActive.Write(writer);
            AudioWeaponPitch.Write(writer);
            AudioWeaponRotate.Write(writer);
            AudioWormIdle.Write(writer);
            AudioWeaponAppear.Write(writer);
            AudioWeaponVanish.Write(writer);
            WeaponEmitter1Name.Write(writer);
            writer.Write(WeaponEmitter1Trigger);
            WeaponEmitter1LocatorName.Write(writer);
            writer.Write(WeaponEmitter1Timer);
            WeaponEmitter2Name.Write(writer);
            writer.Write(WeaponEmitter2Trigger);
            WeaponEmitter2LocatorName.Write(writer);
            writer.Write(WeaponEmitter2Timer);
            WeaponEmitter3Name.Write(writer);
            writer.Write(WeaponEmitter3Trigger);
            WeaponEmitter3LocatorName.Write(writer);
            writer.Write(WeaponEmitter3Timer);
            WeaponEmitter4Name.Write(writer);
            writer.Write(WeaponEmitter4Trigger);
            WeaponEmitter4LocatorName.Write(writer);
            writer.Write(WeaponEmitter4Timer);
            WormIdleAnimationName.Write(writer);
            WormHoldAnimationName.Write(writer);
            WormDrawWeaponAnimationName.Write(writer);
            WormAimWeaponAnimationName.Write(writer);
            WormFireWeaponAnimationName.Write(writer);
            WormSnapDrawAnimationName.Write(writer);
            WormHatName.Write(writer);
            writer.Write(RoundType);
            writer.Write(NumRounds);
            RoundUsesParabolicTrajectory.Write(writer);
            writer.Write(RoundImpactBehaviour);
            writer.Write(RoundFuseTime);
            RoundExplodesWhenFuseExpires.Write(writer);
            writer.Write(RoundMass);
            writer.Write(RoundRestitution);
            writer.Write(RoundFriction);
            writer.Write(RoundImpactFriction);
            writer.Write(RoundCollisionSphereRadius);
            writer.Write(RoundExplosionType);
            writer.Write(RoundExplosionRadius);
            writer.Write(RoundExplosionInnerRadius);
            writer.Write(RoundMaxExplosionDamage);
            writer.Write(RoundMaxExplosionWormDamage);
            writer.Write(RoundMaxExplosionForce);
            writer.Write(RoundExplosionForceFactorAddUp);
            RoundImpaceAnimationName.Write(writer);
            writer.Write(RoundImpactDamage);
            writer.Write(RoundImpactWormDamage);
            writer.Write(RoundImpaceForce);
            RoundRespondsToFireButton.Write(writer);
            RoundIdleAnimaionName.Write(writer);
            RoundFiringAnimationName.Write(writer);
            RoundFallingAnimationName.Write(writer);
            RoundActiveAnimationName.Write(writer);
            writer.Write(RoundRandomRotation);
            RoundGraphicFacesDirectionOfTravel.Write(writer);
            writer.Write(RoundGraphicRotationY);
            writer.Write(RoundGraphicRotationX);
            RoundEmitter1Name.Write(writer);
            writer.Write(RoundEmitter1Trigger);
            writer.Write(RoundEmitter1LocatorNum);
            writer.Write(RoundEmitter1Timer);
            writer.Write(RoundEmitter1LinearVelocityScale);
            RoundEmitter2Name.Write(writer);
            writer.Write(RoundEmitter2Trigger);
            writer.Write(RoundEmitter2LocatorNum);
            writer.Write(RoundEmitter2Timer);
            writer.Write(RoundEmitter2LinearVelocityScale);
            RoundEmitter3Name.Write(writer);
            writer.Write(RoundEmitter3Trigger);
            writer.Write(RoundEmitter3LocatorNum);
            writer.Write(RoundEmitter3Timer);
            writer.Write(RoundEmitter3LinearVelocityScale);
            writer.Write(RoundDelayBetweenRounds);
            writer.Write(MethodOfAttachingRoundMeshToWeapon);
            writer.Write(ProximityRoundDetectionRadius);
            writer.Write(ProximityRoundActivationFuse);
            writer.Write(ProximityRoundActivationEffect);
            writer.Write(ProximityRoundGameTurnsToBeActive);
            writer.Write(ProximityRoundDetectionYOffset);
            writer.Write(SubRoundType);
            writer.Write(NumSubRounds);
            writer.Write(SubRoundImpactBehaviour);
            writer.Write(SubRoundInitialSpeedY);
            writer.Write(SubRoundInitialSpeedXZ);
            writer.Write(SubRoundVelocityFactorOfMainRound);
            writer.Write(SubRoundInitialPositionOffset);
            writer.Write(SubRoundFuseTime);
            SubRoundExplodesWhenFuseExpires.Write(writer);
            writer.Write(SubRoundMass);
            writer.Write(SubRoundRestitution);
            writer.Write(SubRoundFriction);
            writer.Write(SubRoundImpactFriction);
            writer.Write(SubRoundCollisionSphereRadius);
            writer.Write(SubRoundExplosionType);
            writer.Write(SubRoundExplosionRadius);
            writer.Write(SubRoundExplosionInnerRadius);
            writer.Write(SubRoundMaxExplosionDamage);
            writer.Write(SubRoundMaxExplosionWormDamage);
            writer.Write(SubRoundMaxExplosionForce);
            writer.Write(SubRoundExplosionForceFactorAddUp);
            writer.Write(SubRoundImpactDamage);
            writer.Write(SubRoundImpactWormDamage);
            writer.Write(SubRoundImpaceForce);
            SubRoundRespondsToFireButton.Write(writer);
            writer.Write(SubRoundRandomRotation);
            SubRoundGraphicFacesDirectionOfTravel.Write(writer);
            writer.Write(SubRoundGraphicRotationY);
            writer.Write(SubRoundGraphicRotationX);
            SubRoundEmitter1Name.Write(writer);
            writer.Write(SubRoundEmitter1Trigger);
            writer.Write(SubRoundEmitter1LocatorNum);
            writer.Write(SubRoundEmitter1Timer);
            writer.Write(SubRoundEmitter1LinearVelocityScale);
            SubRoundEmitter2Name.Write(writer);
            writer.Write(SubRoundEmitter2Trigger);
            writer.Write(SubRoundEmitter2LocatorNum);
            writer.Write(SubRoundEmitter2Timer);
            writer.Write(SubRoundEmitter2LinearVelocityScale);
            SubRoundEmitter3Name.Write(writer);
            writer.Write(SubRoundEmitter3Trigger);
            writer.Write(SubRoundEmitter3LocatorNum);
            writer.Write(SubRoundEmitter3Timer);
            writer.Write(SubRoundEmitter3LinearVelocityScale);
        }
    }
}
